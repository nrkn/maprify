{
  "name": "interfascist",
  "version": "0.9.2",
  "description": "validate JavaScript objects against interfaces",
  "homepage": "http://github.com/nrkn/interfascist",
  "bugs": {
    "url": "http://github.com/nrkn/interfascist/issues",
    "email": "nrkn.com@gmail.com"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/nrkn/interfascist.git"
  },
  "keywords": [
    "validate",
    "validator",
    "schema",
    "interface",
    "interfaces",
    "npm",
    "javascript",
    "json"
  ],
  "dependencies": {
    "underscore": "1.4.4"
  },
  "author": {
    "name": "Nik Coughlin",
    "email": "nrkn.com@gmail.com",
    "url": "http://nrkn.com"
  },
  "license": "MIT",
  "readme": "# interfascist 0.9.2\r\n\r\nValidate JavaScript objects against interfaces\r\n\r\n```\r\nnpm install interfascist\r\n```\r\n\r\n## What\r\n\r\nYou declare interfaces and then you can test if given objects match them. \r\n\r\n```javascript\r\nvar geometryInterfaces = {\r\n  Point: {\r\n    x: 'Number',\r\n    y: 'Number'\r\n  },\r\n  Size: {\r\n    width: 'Number',\r\n    height: 'Number'\r\n  },\r\n  Rectangle: {\r\n    location: 'Point',\r\n    size: 'Size'\r\n  },\r\n  Color: [ 'red', 'green', 'blue' ],\r\n  Colored: {\r\n    fill: 'Color',\r\n    stroke: 'Color'\r\n  },\r\n  ColoredRectangle: {\r\n    extends: [ 'Rectangle', 'Colored' ]\r\n  },\r\n  RedRectangle: {\r\n    extends: [ 'ColoredRectangle' ],\r\n    values: {\r\n      fill: 'red'\r\n    }\r\n  }\r\n};\r\n\r\nvar validator = new Interfascist( geometryInterfaces );\r\n\r\nvar rect1 = {\r\n  location: { x: 1.3, y: 13 },\r\n  size: { width: 25, height: 96.3 },\r\n  fill: 'red',\r\n  stroke: 'blue'\r\n}\r\n\r\nvar rect2 = {\r\n  location: { x: 41, y: 26 },\r\n  size: { width: 55.3, height: 18 }  \r\n}\r\n\r\nvar rect3 = {\r\n  location: { x: 1.3, y: 13 },\r\n  size: { width: 25, height: 96.3 },\r\n  fill: 'purple',\r\n  stroke: 'purple'\r\n}\r\n\r\nconsole.log( validator.validate( rect1, 'Point' ) ); //false\r\nconsole.log( validator.validate( rect1, 'Rectangle' ) ); //true\r\nconsole.log( validator.validate( rect1, 'ColoredRectangle' ) ); //true\r\nconsole.log( validator.validate( rect1, 'RedRectangle' ) ); //true\r\nconsole.log( validator.validate( rect2, 'Rectangle' ) ); //true\r\nconsole.log( validator.validate( rect2, 'ColoredRectangle' ) ); //false\r\nconsole.log( validator.validate( rect3, 'Rectangle' ) ); //true\r\nconsole.log( validator.validate( rect3, 'ColoredRectangle' ) ); //false\r\n\r\n```\r\n\r\nThere's some more functionality, check out test/test.js until I have a chance\r\nto write a better readme.\r\n\r\n## Tests\r\n\r\nRun with mocha from the root of interfascist\r\n\r\n```\r\nnpm install -g mocha\r\nmocha\r\n```\r\n\r\n## Why not json-schema?\r\n\r\nIt's overwrought for simple validation - if your needs are complex it may suit\r\nyou better. It didn't suit me.\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "readme.md",
  "_id": "interfascist@0.9.2",
  "dist": {
    "shasum": "e233271fa0e3e9241fbff9bfeee951770e6fae3d"
  },
  "_from": "interfascist@~0.9.2",
  "_resolved": "https://registry.npmjs.org/interfascist/-/interfascist-0.9.2.tgz"
}
